import re
import numpy as np
from urllib.parse import urlparse

def extract_features(url):
    """
    Extracts numerical features from the URL for phishing detection
    and also generates human-readable feature explanations.
    """

    explanations = []

    # Length of URL
    url_length = len(url)
    if url_length > 75:
        explanations.append("ðŸ”¸ URL is very long, which is often used to hide malicious content.")
    else:
        explanations.append("âœ… URL length is normal.")

    # Count of special characters
    special_chars = len(re.findall(r"[!@#$%^&*(),.?\":{}|<>]", url))
    if special_chars > 5:
        explanations.append("ðŸ”¸ Contains many special characters, which may be used to trick users.")
    else:
        explanations.append("âœ… Limited special characters, which is typical for legitimate sites.")

    # Count of digits
    digits = sum(c.isdigit() for c in url)
    if digits > 10:
        explanations.append("ðŸ”¸ Excessive use of digits can indicate a suspicious or autogenerated URL.")
    else:
        explanations.append("âœ… Number of digits looks normal.")

    # Count of hyphens (-)
    hyphens = url.count('-')
    if hyphens > 3:
        explanations.append("ðŸ”¸ Too many hyphens, which are often used in phishing URLs.")
    else:
        explanations.append("âœ… Hyphen usage is acceptable.")

    # Count of dots (.)
    dots = url.count('.')
    if dots > 3:
        explanations.append("ðŸ”¸ Too many dots indicating multiple subdomains, which is suspicious.")
    else:
        explanations.append("âœ… Dot count is within normal range.")

    # Presence of "https"
    https = 1 if "https" in url.lower() else 0
    if https == 1:
        explanations.append("âœ… Uses HTTPS, which is more secure.")
    else:
        explanations.append("ðŸ”¸ Does not use HTTPS, which can be a security risk.")

    # Number of subdomains
    parsed_url = urlparse(url)
    subdomains = len(parsed_url.netloc.split('.')) - 2
    if subdomains > 2:
        explanations.append("ðŸ”¸ Contains many subdomains, a tactic often used in phishing.")
    else:
        explanations.append("âœ… Subdomain count is typical.")

    features = [url_length, special_chars, digits, hyphens, dots, https, subdomains]
    return features, explanations
